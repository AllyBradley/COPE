# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import django.utils.timezone
from django.conf import settings
import django.core.validators


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('compare', '0006_recipient_cleaning_log'),
    ]

    operations = [
        migrations.CreateModel(
            name='FollowUp1Y',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('version', models.PositiveIntegerField(default=0)),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('record_locked', models.BooleanField(default=False)),
                ('start_date', models.DateField(default=django.utils.timezone.now, verbose_name='start date')),
                ('graft_failure', models.NullBooleanField(verbose_name='graft failure')),
                ('graft_failure_type', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='graft failure', choices=[(1, 'Immunological'), (2, 'Preservation'), (3, 'Technical - artery'), (4, 'Technical - venous'), (5, 'Infection - bacterial'), (6, 'Infection - viral'), (10, 'Other')])),
                ('graft_failure_type_other', models.CharField(max_length=200, verbose_name='Other failure type', blank=True)),
                ('graft_failure_date', models.DateField(null=True, verbose_name='date of graft failure', blank=True)),
                ('graft_removal', models.NullBooleanField(verbose_name='graft removal')),
                ('graft_removal_date', models.DateField(null=True, verbose_name='date of graft removal', blank=True)),
                ('serum_creatinine_1', models.FloatField(blank=True, null=True, verbose_name='creatinine 1', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('serum_creatinine_1_unit', models.PositiveSmallIntegerField(default=1, choices=[(1, 'mg/dl'), (2, 'umol/L'), (3, 'mmol/L')])),
                ('dialysis_requirement_1', models.DateField(null=True, verbose_name='date of dialysis requirement 1', blank=True)),
                ('dialysis_type', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Dialysis type', choices=[(1, 'CAPD'), (2, 'Hemodialysis'), (3, 'Unknown')])),
                ('immunosuppression', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Post tx immunosuppression', choices=[(1, 'Azathioprine'), (2, 'Cyclosporin'), (3, 'MMF'), (4, 'Prednisolone'), (5, 'Sirolomus'), (6, 'Tacrolimus'), (7, 'Other')])),
                ('immunosuppression_other', models.CharField(max_length=200, verbose_name='Other immunosuppression', blank=True)),
                ('rejection', models.NullBooleanField(verbose_name='rejection')),
                ('rejection_prednisolone', models.NullBooleanField(verbose_name='treated with prednisolone')),
                ('rejection_drug', models.NullBooleanField(verbose_name='treated with other drug')),
                ('rejection_drug_other', models.CharField(max_length=200, verbose_name='Other rejection drug', blank=True)),
                ('rejection_biopsy', models.NullBooleanField(verbose_name='biopsy proven')),
                ('calcineurin', models.NullBooleanField(verbose_name='calcineurin inhibitor')),
                ('notes', models.TextField(verbose_name='general notes', blank=True)),
                ('urine_creatinine', models.FloatField(blank=True, null=True, verbose_name='urine creatinine', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('urine_creatinine_unit', models.PositiveSmallIntegerField(default=1, choices=[(1, 'mg/dl'), (2, 'umol/L'), (3, 'mmol/L')])),
                ('creatinine_clearance', models.FloatField(blank=True, null=True, verbose_name='creatinine clearance', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('currently_on_dialysis', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='currently on dialysis', choices=[(2, 'MM03 Unknown'), (0, 'MM01 No'), (1, 'MM02 Yes')])),
                ('number_of_dialysis_sessions', models.PositiveSmallIntegerField(null=True, verbose_name='number of dialysis sessions', blank=True)),
                ('rejection_periods', models.PositiveSmallIntegerField(null=True, verbose_name='rejection periods', blank=True)),
                ('graft_complications', models.TextField(verbose_name='graft function complications', blank=True)),
                ('qol_mobility', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='qol mobility score', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('qol_selfcare', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='qol self care score', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('qol_usual_activities', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='qol usual activites score', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('qol_pain', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='qol pain or discomfort score', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('qol_anxiety', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='qol anxiety or depression score', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('vas_score', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='vas score', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('created_by', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
                ('organ', models.ForeignKey(to='compare.Organ')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FollowUp3M',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('version', models.PositiveIntegerField(default=0)),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('record_locked', models.BooleanField(default=False)),
                ('start_date', models.DateField(default=django.utils.timezone.now, verbose_name='start date')),
                ('graft_failure', models.NullBooleanField(verbose_name='graft failure')),
                ('graft_failure_type', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='graft failure', choices=[(1, 'Immunological'), (2, 'Preservation'), (3, 'Technical - artery'), (4, 'Technical - venous'), (5, 'Infection - bacterial'), (6, 'Infection - viral'), (10, 'Other')])),
                ('graft_failure_type_other', models.CharField(max_length=200, verbose_name='Other failure type', blank=True)),
                ('graft_failure_date', models.DateField(null=True, verbose_name='date of graft failure', blank=True)),
                ('graft_removal', models.NullBooleanField(verbose_name='graft removal')),
                ('graft_removal_date', models.DateField(null=True, verbose_name='date of graft removal', blank=True)),
                ('serum_creatinine_1', models.FloatField(blank=True, null=True, verbose_name='creatinine 1', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('serum_creatinine_1_unit', models.PositiveSmallIntegerField(default=1, choices=[(1, 'mg/dl'), (2, 'umol/L'), (3, 'mmol/L')])),
                ('dialysis_requirement_1', models.DateField(null=True, verbose_name='date of dialysis requirement 1', blank=True)),
                ('dialysis_type', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Dialysis type', choices=[(1, 'CAPD'), (2, 'Hemodialysis'), (3, 'Unknown')])),
                ('immunosuppression', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Post tx immunosuppression', choices=[(1, 'Azathioprine'), (2, 'Cyclosporin'), (3, 'MMF'), (4, 'Prednisolone'), (5, 'Sirolomus'), (6, 'Tacrolimus'), (7, 'Other')])),
                ('immunosuppression_other', models.CharField(max_length=200, verbose_name='Other immunosuppression', blank=True)),
                ('rejection', models.NullBooleanField(verbose_name='rejection')),
                ('rejection_prednisolone', models.NullBooleanField(verbose_name='treated with prednisolone')),
                ('rejection_drug', models.NullBooleanField(verbose_name='treated with other drug')),
                ('rejection_drug_other', models.CharField(max_length=200, verbose_name='Other rejection drug', blank=True)),
                ('rejection_biopsy', models.NullBooleanField(verbose_name='biopsy proven')),
                ('calcineurin', models.NullBooleanField(verbose_name='calcineurin inhibitor')),
                ('notes', models.TextField(verbose_name='general notes', blank=True)),
                ('urine_creatinine', models.FloatField(blank=True, null=True, verbose_name='urine creatinine', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('urine_creatinine_unit', models.PositiveSmallIntegerField(default=1, choices=[(1, 'mg/dl'), (2, 'umol/L'), (3, 'mmol/L')])),
                ('creatinine_clearance', models.FloatField(blank=True, null=True, verbose_name='creatinine clearance', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('currently_on_dialysis', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='currently on dialysis', choices=[(2, 'MM03 Unknown'), (0, 'MM01 No'), (1, 'MM02 Yes')])),
                ('number_of_dialysis_sessions', models.PositiveSmallIntegerField(null=True, verbose_name='number of dialysis sessions', blank=True)),
                ('rejection_periods', models.PositiveSmallIntegerField(null=True, verbose_name='rejection periods', blank=True)),
                ('graft_complications', models.TextField(verbose_name='graft function complications', blank=True)),
                ('qol_mobility', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='qol mobility score', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('qol_selfcare', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='qol self care score', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('qol_usual_activities', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='qol usual activites score', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('qol_pain', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='qol pain or discomfort score', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('qol_anxiety', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='qol anxiety or depression score', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('vas_score', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='vas score', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('created_by', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
                ('organ', models.ForeignKey(to='compare.Organ')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FollowUp6M',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('version', models.PositiveIntegerField(default=0)),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('record_locked', models.BooleanField(default=False)),
                ('start_date', models.DateField(default=django.utils.timezone.now, verbose_name='start date')),
                ('graft_failure', models.NullBooleanField(verbose_name='graft failure')),
                ('graft_failure_type', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='graft failure', choices=[(1, 'Immunological'), (2, 'Preservation'), (3, 'Technical - artery'), (4, 'Technical - venous'), (5, 'Infection - bacterial'), (6, 'Infection - viral'), (10, 'Other')])),
                ('graft_failure_type_other', models.CharField(max_length=200, verbose_name='Other failure type', blank=True)),
                ('graft_failure_date', models.DateField(null=True, verbose_name='date of graft failure', blank=True)),
                ('graft_removal', models.NullBooleanField(verbose_name='graft removal')),
                ('graft_removal_date', models.DateField(null=True, verbose_name='date of graft removal', blank=True)),
                ('serum_creatinine_1', models.FloatField(blank=True, null=True, verbose_name='creatinine 1', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('serum_creatinine_1_unit', models.PositiveSmallIntegerField(default=1, choices=[(1, 'mg/dl'), (2, 'umol/L'), (3, 'mmol/L')])),
                ('dialysis_requirement_1', models.DateField(null=True, verbose_name='date of dialysis requirement 1', blank=True)),
                ('dialysis_type', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Dialysis type', choices=[(1, 'CAPD'), (2, 'Hemodialysis'), (3, 'Unknown')])),
                ('immunosuppression', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Post tx immunosuppression', choices=[(1, 'Azathioprine'), (2, 'Cyclosporin'), (3, 'MMF'), (4, 'Prednisolone'), (5, 'Sirolomus'), (6, 'Tacrolimus'), (7, 'Other')])),
                ('immunosuppression_other', models.CharField(max_length=200, verbose_name='Other immunosuppression', blank=True)),
                ('rejection', models.NullBooleanField(verbose_name='rejection')),
                ('rejection_prednisolone', models.NullBooleanField(verbose_name='treated with prednisolone')),
                ('rejection_drug', models.NullBooleanField(verbose_name='treated with other drug')),
                ('rejection_drug_other', models.CharField(max_length=200, verbose_name='Other rejection drug', blank=True)),
                ('rejection_biopsy', models.NullBooleanField(verbose_name='biopsy proven')),
                ('calcineurin', models.NullBooleanField(verbose_name='calcineurin inhibitor')),
                ('notes', models.TextField(verbose_name='general notes', blank=True)),
                ('urine_creatinine', models.FloatField(blank=True, null=True, verbose_name='urine creatinine', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('urine_creatinine_unit', models.PositiveSmallIntegerField(default=1, choices=[(1, 'mg/dl'), (2, 'umol/L'), (3, 'mmol/L')])),
                ('creatinine_clearance', models.FloatField(blank=True, null=True, verbose_name='creatinine clearance', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('currently_on_dialysis', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='currently on dialysis', choices=[(2, 'MM03 Unknown'), (0, 'MM01 No'), (1, 'MM02 Yes')])),
                ('number_of_dialysis_sessions', models.PositiveSmallIntegerField(null=True, verbose_name='number of dialysis sessions', blank=True)),
                ('graft_complications', models.TextField(verbose_name='graft function complications', blank=True)),
                ('created_by', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
                ('organ', models.ForeignKey(to='compare.Organ')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FollowUpInitial',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('version', models.PositiveIntegerField(default=0)),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('record_locked', models.BooleanField(default=False)),
                ('start_date', models.DateField(default=django.utils.timezone.now, verbose_name='start date')),
                ('graft_failure', models.NullBooleanField(verbose_name='graft failure')),
                ('graft_failure_type', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='graft failure', choices=[(1, 'Immunological'), (2, 'Preservation'), (3, 'Technical - artery'), (4, 'Technical - venous'), (5, 'Infection - bacterial'), (6, 'Infection - viral'), (10, 'Other')])),
                ('graft_failure_type_other', models.CharField(max_length=200, verbose_name='Other failure type', blank=True)),
                ('graft_failure_date', models.DateField(null=True, verbose_name='date of graft failure', blank=True)),
                ('graft_removal', models.NullBooleanField(verbose_name='graft removal')),
                ('graft_removal_date', models.DateField(null=True, verbose_name='date of graft removal', blank=True)),
                ('serum_creatinine_1', models.FloatField(blank=True, null=True, verbose_name='creatinine 1', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('serum_creatinine_1_unit', models.PositiveSmallIntegerField(default=1, choices=[(1, 'mg/dl'), (2, 'umol/L'), (3, 'mmol/L')])),
                ('dialysis_requirement_1', models.DateField(null=True, verbose_name='date of dialysis requirement 1', blank=True)),
                ('dialysis_type', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Dialysis type', choices=[(1, 'CAPD'), (2, 'Hemodialysis'), (3, 'Unknown')])),
                ('immunosuppression', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Post tx immunosuppression', choices=[(1, 'Azathioprine'), (2, 'Cyclosporin'), (3, 'MMF'), (4, 'Prednisolone'), (5, 'Sirolomus'), (6, 'Tacrolimus'), (7, 'Other')])),
                ('immunosuppression_other', models.CharField(max_length=200, verbose_name='Other immunosuppression', blank=True)),
                ('rejection', models.NullBooleanField(verbose_name='rejection')),
                ('rejection_prednisolone', models.NullBooleanField(verbose_name='treated with prednisolone')),
                ('rejection_drug', models.NullBooleanField(verbose_name='treated with other drug')),
                ('rejection_drug_other', models.CharField(max_length=200, verbose_name='Other rejection drug', blank=True)),
                ('rejection_biopsy', models.NullBooleanField(verbose_name='biopsy proven')),
                ('calcineurin', models.NullBooleanField(verbose_name='calcineurin inhibitor')),
                ('notes', models.TextField(verbose_name='general notes', blank=True)),
                ('serum_creatinine_2', models.FloatField(blank=True, null=True, verbose_name='creatinine 2', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('serum_creatinine_2_unit', models.PositiveSmallIntegerField(default=1, choices=[(1, 'mg/dl'), (2, 'umol/L'), (3, 'mmol/L')])),
                ('serum_creatinine_3', models.FloatField(blank=True, null=True, verbose_name='creatinine 3', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('serum_creatinine_3_unit', models.PositiveSmallIntegerField(default=1, choices=[(1, 'mg/dl'), (2, 'umol/L'), (3, 'mmol/L')])),
                ('serum_creatinine_4', models.FloatField(blank=True, null=True, verbose_name='creatinine 4', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('serum_creatinine_4_unit', models.PositiveSmallIntegerField(default=1, choices=[(1, 'mg/dl'), (2, 'umol/L'), (3, 'mmol/L')])),
                ('serum_creatinine_5', models.FloatField(blank=True, null=True, verbose_name='creatinine 5', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('serum_creatinine_5_unit', models.PositiveSmallIntegerField(default=1, choices=[(1, 'mg/dl'), (2, 'umol/L'), (3, 'mmol/L')])),
                ('serum_creatinine_6', models.FloatField(blank=True, null=True, verbose_name='creatinine 6', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('serum_creatinine_6_unit', models.PositiveSmallIntegerField(default=1, choices=[(1, 'mg/dl'), (2, 'umol/L'), (3, 'mmol/L')])),
                ('serum_creatinine_7', models.FloatField(blank=True, null=True, verbose_name='creatinine 7', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('serum_creatinine_7_unit', models.PositiveSmallIntegerField(default=1, choices=[(1, 'mg/dl'), (2, 'umol/L'), (3, 'mmol/L')])),
                ('dialysis_requirement_2', models.DateField(null=True, verbose_name='date of dialysis requirement 2', blank=True)),
                ('dialysis_requirement_3', models.DateField(null=True, verbose_name='date of dialysis requirement 3', blank=True)),
                ('dialysis_requirement_4', models.DateField(null=True, verbose_name='date of dialysis requirement 4', blank=True)),
                ('dialysis_requirement_5', models.DateField(null=True, verbose_name='date of dialysis requirement 5', blank=True)),
                ('dialysis_requirement_6', models.DateField(null=True, verbose_name='date of dialysis requirement 6', blank=True)),
                ('dialysis_requirement_7', models.DateField(null=True, verbose_name='date of dialysis requirement 7', blank=True)),
                ('dialysis_cause', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Dialysis cause', choices=[(1, 'Delayed graft function'), (2, 'Hyperkalemia'), (3, 'Fluid overload'), (4, 'Other')])),
                ('dialysis_cause_other', models.CharField(max_length=200, verbose_name='Other dialysis cause', blank=True)),
                ('hla_mismatch_a', models.CharField(max_length=10, verbose_name='HLA A', blank=True)),
                ('hla_mismatch_b', models.CharField(max_length=10, verbose_name='HLA B', blank=True)),
                ('hla_mismatch_dr', models.CharField(max_length=10, verbose_name='HLA DR', blank=True)),
                ('induction_therapy', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Induction therapy', choices=[(1, 'IL 2'), (2, 'ATG')])),
                ('discharge_date', models.DateField(null=True, verbose_name='date of primary post tx discharge', blank=True)),
                ('created_by', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
                ('organ', models.ForeignKey(to='compare.Organ')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
