# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2016-04-29 09:28
from __future__ import unicode_literals

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    replaces = [('followups', '0001_initial'), ('followups', '0002_auto_20160121_2034'), ('followups', '0003_auto_20160122_1031'), ('followups', '0004_auto_20160201_1704'), ('followups', '0005_auto_20160226_1617'), ('followups', '0006_auto_20160226_1643'), ('followups', '0007_auto_20160226_2031'), ('followups', '0008_auto_20160413_1609'), ('followups', '0009_auto_20160413_1616'), ('followups', '0010_auto_20160427_1938'), ('followups', '0011_auto_20160429_0924')]

    initial = True

    dependencies = [
        ('health_economics', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('compare', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='FollowUp1Y',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.PositiveIntegerField(default=0)),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('record_locked', models.BooleanField(default=False)),
                ('start_date', models.DateField(default=django.utils.timezone.now, verbose_name='FB01 start date')),
                ('graft_failure', models.NullBooleanField(verbose_name='FB02 graft failure')),
                ('graft_failure_type', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'FBc01 Immunological'), (2, 'FBc02 Preservation'), (3, 'FBc03 Technical - artery'), (4, 'FBc04 Technical - venous'), (5, 'FBc05 Infection - bacterial'), (6, 'FBc06 Infection - viral'), (10, 'FBc07 Other')], null=True, verbose_name='FB03 graft failure')),
                ('graft_failure_type_other', models.CharField(blank=True, max_length=200, verbose_name='FB04 Other failure type')),
                ('graft_failure_date', models.DateField(blank=True, null=True, verbose_name='FB05 date of graft failure')),
                ('graft_removal', models.NullBooleanField(verbose_name='FB06 graft removal')),
                ('graft_removal_date', models.DateField(blank=True, null=True, verbose_name='FB07 date of graft removal')),
                ('serum_creatinine_1', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='FB08 creatinine 1')),
                ('serum_creatinine_1_unit', models.PositiveSmallIntegerField(choices=[(1, 'mg/dl'), (2, 'umol/L'), (3, 'mmol/L')], default=1)),
                ('dialysis_requirement_1', models.DateField(blank=True, null=True, verbose_name='FB10 date of dialysis requirement 1')),
                ('dialysis_type', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'FBc10 CAPD'), (2, 'FBc11 Hemodialysis'), (3, 'FBc12 Unknown')], null=True, verbose_name='FB11 Dialysis type')),
                ('immunosuppression', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'FBc20 Azathioprine'), (2, 'FBc21 Cyclosporin'), (3, 'FBc22 MMF'), (4, 'FBc23 Prednisolone'), (5, 'FBc24 Sirolomus'), (6, 'FBc25 Tacrolimus'), (7, 'FBc26 Other')], null=True, verbose_name='FB12 Post tx immunosuppression')),
                ('immunosuppression_other', models.CharField(blank=True, max_length=200, verbose_name='FB13 Other immunosuppression')),
                ('rejection', models.NullBooleanField(verbose_name='FB14 rejection')),
                ('rejection_prednisolone', models.NullBooleanField(verbose_name='FB15 treated with prednisolone')),
                ('rejection_drug', models.NullBooleanField(verbose_name='FB16 treated with other drug')),
                ('rejection_drug_other', models.CharField(blank=True, max_length=200, verbose_name='FB17 Other rejection drug')),
                ('rejection_biopsy', models.NullBooleanField(verbose_name='FB18 biopsy proven')),
                ('calcineurin', models.NullBooleanField(verbose_name='FB19 calcineurin inhibitor')),
                ('notes', models.TextField(blank=True, verbose_name='FB20 general notes')),
                ('urine_creatinine', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='FY01 urine creatinine')),
                ('urine_creatinine_unit', models.PositiveSmallIntegerField(choices=[(1, 'mg/dl'), (2, 'umol/L'), (3, 'mmol/L')], default=1)),
                ('creatinine_clearance', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='FY02 creatinine clearance')),
                ('currently_on_dialysis', models.PositiveSmallIntegerField(blank=True, choices=[(2, 'MMc03 Unknown'), (0, 'MMc01 No'), (1, 'MMc02 Yes')], null=True, verbose_name='FY03 currently on dialysis')),
                ('number_of_dialysis_sessions', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='FY04 number of dialysis sessions')),
                ('rejection_periods', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='FY05 rejection periods')),
                ('graft_complications', models.TextField(blank=True, verbose_name='FY06 graft function complications')),
                ('qol_mobility', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='FY10 qol mobility score')),
                ('qol_selfcare', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='FY11 qol self care score')),
                ('qol_usual_activities', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='FY12 qol usual activites score')),
                ('qol_pain', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='FY13 qol pain or discomfort score')),
                ('qol_anxiety', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='FY14 qol anxiety or depression score')),
                ('vas_score', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='FY15 vas score')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('organ', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='followup_1y', to='compare.Organ')),
                ('completed', models.BooleanField(default=False, verbose_name='FB21 form completed')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FollowUp3M',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.PositiveIntegerField(default=0)),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('record_locked', models.BooleanField(default=False)),
                ('start_date', models.DateField(default=django.utils.timezone.now, verbose_name='FB01 start date')),
                ('graft_failure', models.NullBooleanField(verbose_name='FB02 graft failure')),
                ('graft_failure_type', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'FBc01 Immunological'), (2, 'FBc02 Preservation'), (3, 'FBc03 Technical - artery'), (4, 'FBc04 Technical - venous'), (5, 'FBc05 Infection - bacterial'), (6, 'FBc06 Infection - viral'), (10, 'FBc07 Other')], null=True, verbose_name='FB03 graft failure')),
                ('graft_failure_type_other', models.CharField(blank=True, max_length=200, verbose_name='FB04 Other failure type')),
                ('graft_failure_date', models.DateField(blank=True, null=True, verbose_name='FB05 date of graft failure')),
                ('graft_removal', models.NullBooleanField(verbose_name='FB06 graft removal')),
                ('graft_removal_date', models.DateField(blank=True, null=True, verbose_name='FB07 date of graft removal')),
                ('serum_creatinine_1', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='FB08 creatinine 1')),
                ('serum_creatinine_1_unit', models.PositiveSmallIntegerField(choices=[(1, 'mg/dl'), (2, 'umol/L'), (3, 'mmol/L')], default=1)),
                ('dialysis_requirement_1', models.DateField(blank=True, null=True, verbose_name='FB10 date of dialysis requirement 1')),
                ('dialysis_type', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'FBc10 CAPD'), (2, 'FBc11 Hemodialysis'), (3, 'FBc12 Unknown')], null=True, verbose_name='FB11 Dialysis type')),
                ('immunosuppression', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'FBc20 Azathioprine'), (2, 'FBc21 Cyclosporin'), (3, 'FBc22 MMF'), (4, 'FBc23 Prednisolone'), (5, 'FBc24 Sirolomus'), (6, 'FBc25 Tacrolimus'), (7, 'FBc26 Other')], null=True, verbose_name='FB12 Post tx immunosuppression')),
                ('immunosuppression_other', models.CharField(blank=True, max_length=200, verbose_name='FB13 Other immunosuppression')),
                ('rejection', models.NullBooleanField(verbose_name='FB14 rejection')),
                ('rejection_prednisolone', models.NullBooleanField(verbose_name='FB15 treated with prednisolone')),
                ('rejection_drug', models.NullBooleanField(verbose_name='FB16 treated with other drug')),
                ('rejection_drug_other', models.CharField(blank=True, max_length=200, verbose_name='FB17 Other rejection drug')),
                ('rejection_biopsy', models.NullBooleanField(verbose_name='FB18 biopsy proven')),
                ('calcineurin', models.NullBooleanField(verbose_name='FB19 calcineurin inhibitor')),
                ('notes', models.TextField(blank=True, verbose_name='FB20 general notes')),
                ('urine_creatinine', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='F301 urine creatinine')),
                ('urine_creatinine_unit', models.PositiveSmallIntegerField(choices=[(1, 'mg/dl'), (2, 'umol/L'), (3, 'mmol/L')], default=1)),
                ('creatinine_clearance', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='F302 creatinine clearance')),
                ('currently_on_dialysis', models.PositiveSmallIntegerField(blank=True, choices=[(2, 'MMc03 Unknown'), (0, 'MMc01 No'), (1, 'MMc02 Yes')], null=True, verbose_name='F303 currently on dialysis')),
                ('number_of_dialysis_sessions', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='F304 number of dialysis sessions')),
                ('rejection_periods', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='F305 rejection periods')),
                ('graft_complications', models.TextField(blank=True, verbose_name='F306 graft function complications')),
                ('qol_mobility', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='F307 qol mobility score')),
                ('qol_selfcare', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='F308 qol self care score')),
                ('qol_usual_activities', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='F309 qol usual activites score')),
                ('qol_pain', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='F310 qol pain or discomfort score')),
                ('qol_anxiety', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='F311 qol anxiety or depression score')),
                ('vas_score', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='F312 vas score')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('organ', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='followup_3m', to='compare.Organ')),
                ('completed', models.BooleanField(default=False, verbose_name='FB21 form completed')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FollowUp6M',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.PositiveIntegerField(default=0)),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('record_locked', models.BooleanField(default=False)),
                ('start_date', models.DateField(default=django.utils.timezone.now, verbose_name='FB01 start date')),
                ('graft_failure', models.NullBooleanField(verbose_name='FB02 graft failure')),
                ('graft_failure_type', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'FBc01 Immunological'), (2, 'FBc02 Preservation'), (3, 'FBc03 Technical - artery'), (4, 'FBc04 Technical - venous'), (5, 'FBc05 Infection - bacterial'), (6, 'FBc06 Infection - viral'), (10, 'FBc07 Other')], null=True, verbose_name='FB03 graft failure')),
                ('graft_failure_type_other', models.CharField(blank=True, max_length=200, verbose_name='FB04 Other failure type')),
                ('graft_failure_date', models.DateField(blank=True, null=True, verbose_name='FB05 date of graft failure')),
                ('graft_removal', models.NullBooleanField(verbose_name='FB06 graft removal')),
                ('graft_removal_date', models.DateField(blank=True, null=True, verbose_name='FB07 date of graft removal')),
                ('serum_creatinine_1', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='FB08 creatinine 1')),
                ('serum_creatinine_1_unit', models.PositiveSmallIntegerField(choices=[(1, 'mg/dl'), (2, 'umol/L'), (3, 'mmol/L')], default=1)),
                ('dialysis_requirement_1', models.DateField(blank=True, null=True, verbose_name='FB10 date of dialysis requirement 1')),
                ('dialysis_type', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'FBc10 CAPD'), (2, 'FBc11 Hemodialysis'), (3, 'FBc12 Unknown')], null=True, verbose_name='FB11 Dialysis type')),
                ('immunosuppression', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'FBc20 Azathioprine'), (2, 'FBc21 Cyclosporin'), (3, 'FBc22 MMF'), (4, 'FBc23 Prednisolone'), (5, 'FBc24 Sirolomus'), (6, 'FBc25 Tacrolimus'), (7, 'FBc26 Other')], null=True, verbose_name='FB12 Post tx immunosuppression')),
                ('immunosuppression_other', models.CharField(blank=True, max_length=200, verbose_name='FB13 Other immunosuppression')),
                ('rejection', models.NullBooleanField(verbose_name='FB14 rejection')),
                ('rejection_prednisolone', models.NullBooleanField(verbose_name='FB15 treated with prednisolone')),
                ('rejection_drug', models.NullBooleanField(verbose_name='FB16 treated with other drug')),
                ('rejection_drug_other', models.CharField(blank=True, max_length=200, verbose_name='FB17 Other rejection drug')),
                ('rejection_biopsy', models.NullBooleanField(verbose_name='FB18 biopsy proven')),
                ('calcineurin', models.NullBooleanField(verbose_name='FB19 calcineurin inhibitor')),
                ('notes', models.TextField(blank=True, verbose_name='FB20 general notes')),
                ('urine_creatinine', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='F601 urine creatinine')),
                ('urine_creatinine_unit', models.PositiveSmallIntegerField(choices=[(1, 'mg/dl'), (2, 'umol/L'), (3, 'mmol/L')], default=1)),
                ('creatinine_clearance', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='F602 creatinine clearance')),
                ('currently_on_dialysis', models.PositiveSmallIntegerField(blank=True, choices=[(2, 'MMc03 Unknown'), (0, 'MMc01 No'), (1, 'MMc02 Yes')], null=True, verbose_name='F603 currently on dialysis')),
                ('number_of_dialysis_sessions', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='F604 number of dialysis sessions')),
                ('graft_complications', models.TextField(blank=True, verbose_name='F605 graft function complications')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('organ', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='followup_6m', to='compare.Organ')),
                ('rejection_periods', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='F606 rejection periods')),
                ('completed', models.BooleanField(default=False, verbose_name='FB21 form completed')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FollowUpInitial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.PositiveIntegerField(default=0)),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('record_locked', models.BooleanField(default=False)),
                ('start_date', models.DateField(default=django.utils.timezone.now, verbose_name='FB01 start date')),
                ('graft_failure', models.NullBooleanField(verbose_name='FB02 graft failure')),
                ('graft_failure_type', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'FBc01 Immunological'), (2, 'FBc02 Preservation'), (3, 'FBc03 Technical - artery'), (4, 'FBc04 Technical - venous'), (5, 'FBc05 Infection - bacterial'), (6, 'FBc06 Infection - viral'), (10, 'FBc07 Other')], null=True, verbose_name='FB03 graft failure')),
                ('graft_failure_type_other', models.CharField(blank=True, max_length=200, verbose_name='FB04 Other failure type')),
                ('graft_failure_date', models.DateField(blank=True, null=True, verbose_name='FB05 date of graft failure')),
                ('graft_removal', models.NullBooleanField(verbose_name='FB06 graft removal')),
                ('graft_removal_date', models.DateField(blank=True, null=True, verbose_name='FB07 date of graft removal')),
                ('serum_creatinine_1', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='FB08 creatinine 1')),
                ('serum_creatinine_1_unit', models.PositiveSmallIntegerField(choices=[(1, 'mg/dl'), (2, 'umol/L'), (3, 'mmol/L')], default=1)),
                ('dialysis_requirement_1', models.DateField(blank=True, null=True, verbose_name='FB10 date of dialysis requirement 1')),
                ('dialysis_type', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'FBc10 CAPD'), (2, 'FBc11 Hemodialysis'), (3, 'FBc12 Unknown')], null=True, verbose_name='FB11 Dialysis type')),
                ('immunosuppression', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'FBc20 Azathioprine'), (2, 'FBc21 Cyclosporin'), (3, 'FBc22 MMF'), (4, 'FBc23 Prednisolone'), (5, 'FBc24 Sirolomus'), (6, 'FBc25 Tacrolimus'), (7, 'FBc26 Other')], null=True, verbose_name='FB12 Post tx immunosuppression')),
                ('immunosuppression_other', models.CharField(blank=True, max_length=200, verbose_name='FB13 Other immunosuppression')),
                ('rejection', models.NullBooleanField(verbose_name='FB14 rejection')),
                ('rejection_prednisolone', models.NullBooleanField(verbose_name='FB15 treated with prednisolone')),
                ('rejection_drug', models.NullBooleanField(verbose_name='FB16 treated with other drug')),
                ('rejection_drug_other', models.CharField(blank=True, max_length=200, verbose_name='FB17 Other rejection drug')),
                ('rejection_biopsy', models.NullBooleanField(verbose_name='FB18 biopsy proven')),
                ('calcineurin', models.NullBooleanField(verbose_name='FB19 calcineurin inhibitor')),
                ('notes', models.TextField(blank=True, verbose_name='FB20 general notes')),
                ('serum_creatinine_2', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='FI01 creatinine 2')),
                ('serum_creatinine_2_unit', models.PositiveSmallIntegerField(choices=[(1, 'mg/dl'), (2, 'umol/L'), (3, 'mmol/L')], default=1)),
                ('serum_creatinine_3', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='FI02 creatinine 3')),
                ('serum_creatinine_3_unit', models.PositiveSmallIntegerField(choices=[(1, 'mg/dl'), (2, 'umol/L'), (3, 'mmol/L')], default=1)),
                ('serum_creatinine_4', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='FI03 creatinine 4')),
                ('serum_creatinine_4_unit', models.PositiveSmallIntegerField(choices=[(1, 'mg/dl'), (2, 'umol/L'), (3, 'mmol/L')], default=1)),
                ('serum_creatinine_5', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='FI04 creatinine 5')),
                ('serum_creatinine_5_unit', models.PositiveSmallIntegerField(choices=[(1, 'mg/dl'), (2, 'umol/L'), (3, 'mmol/L')], default=1)),
                ('serum_creatinine_6', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='FI05 creatinine 6')),
                ('serum_creatinine_6_unit', models.PositiveSmallIntegerField(choices=[(1, 'mg/dl'), (2, 'umol/L'), (3, 'mmol/L')], default=1)),
                ('serum_creatinine_7', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='FI06 creatinine 7')),
                ('serum_creatinine_7_unit', models.PositiveSmallIntegerField(choices=[(1, 'mg/dl'), (2, 'umol/L'), (3, 'mmol/L')], default=1)),
                ('dialysis_requirement_2', models.DateField(blank=True, null=True, verbose_name='FI10 date of dialysis requirement 2')),
                ('dialysis_requirement_3', models.DateField(blank=True, null=True, verbose_name='FI11 date of dialysis requirement 3')),
                ('dialysis_requirement_4', models.DateField(blank=True, null=True, verbose_name='FI12 date of dialysis requirement 4')),
                ('dialysis_requirement_5', models.DateField(blank=True, null=True, verbose_name='FI13 date of dialysis requirement 5')),
                ('dialysis_requirement_6', models.DateField(blank=True, null=True, verbose_name='FI14 date of dialysis requirement 6')),
                ('dialysis_requirement_7', models.DateField(blank=True, null=True, verbose_name='FI15 date of dialysis requirement 7')),
                ('dialysis_cause', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'FIc01 Delayed graft function'), (2, 'FIc02 Hyperkalemia'), (3, 'FIc03 Fluid overload'), (4, 'FIc04 Other')], null=True, verbose_name='FI20 Dialysis cause')),
                ('dialysis_cause_other', models.CharField(blank=True, max_length=200, verbose_name='FI21 Other dialysis cause')),
                ('hla_mismatch_a', models.CharField(blank=True, max_length=10, verbose_name='FI22 HLA A')),
                ('hla_mismatch_b', models.CharField(blank=True, max_length=10, verbose_name='FI23 HLA B')),
                ('hla_mismatch_dr', models.CharField(blank=True, max_length=10, verbose_name='FI24 HLA DR')),
                ('induction_therapy', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'FIc10 IL 2'), (2, 'FIc11 ATG')], null=True, verbose_name='FI25 Induction therapy')),
                ('discharge_date', models.DateField(blank=True, null=True, verbose_name='FI26 date of primary post tx discharge')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('organ', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='followup_initial', to='compare.Organ')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterModelOptions(
            name='followupinitial',
            options={'verbose_name': 'FIm1 Initial FollowUp', 'verbose_name_plural': 'FIm2 Initial FollowUps'},
        ),
        migrations.AddField(
            model_name='followupinitial',
            name='completed',
            field=models.BooleanField(default=False, verbose_name='FB21 form completed'),
        ),
        migrations.AlterModelOptions(
            name='followup1y',
            options={'verbose_name': 'FYm1 1 Year FollowUp', 'verbose_name_plural': 'FYm2 1 Year FollowUps'},
        ),
        migrations.AlterModelOptions(
            name='followup3m',
            options={'verbose_name': 'F3m1 3 Month FollowUp', 'verbose_name_plural': 'F3m2 3 Month FollowUps'},
        ),
        migrations.AlterModelOptions(
            name='followup6m',
            options={'verbose_name': 'F6m1 6 Month FollowUp', 'verbose_name_plural': 'F6m2 6 Month FollowUps'},
        ),
        migrations.RemoveField(
            model_name='followup1y',
            name='dialysis_requirement_1',
        ),
        migrations.RemoveField(
            model_name='followup3m',
            name='dialysis_requirement_1',
        ),
        migrations.RemoveField(
            model_name='followup6m',
            name='dialysis_requirement_1',
        ),
        migrations.RemoveField(
            model_name='followupinitial',
            name='dialysis_requirement_1',
        ),
        migrations.AddField(
            model_name='followup1y',
            name='last_dialysis_at',
            field=models.DateField(blank=True, null=True, verbose_name='FB10 date of last dialysis'),
        ),
        migrations.AddField(
            model_name='followup1y',
            name='on_dialysis_at_death',
            field=models.NullBooleanField(verbose_name='FB30 on dialysis at death'),
        ),
        migrations.AddField(
            model_name='followup3m',
            name='last_dialysis_at',
            field=models.DateField(blank=True, null=True, verbose_name='FB10 date of last dialysis'),
        ),
        migrations.AddField(
            model_name='followup3m',
            name='on_dialysis_at_death',
            field=models.NullBooleanField(verbose_name='FB30 on dialysis at death'),
        ),
        migrations.AddField(
            model_name='followup6m',
            name='last_dialysis_at',
            field=models.DateField(blank=True, null=True, verbose_name='FB10 date of last dialysis'),
        ),
        migrations.AddField(
            model_name='followup6m',
            name='on_dialysis_at_death',
            field=models.NullBooleanField(verbose_name='FB30 on dialysis at death'),
        ),
        migrations.AddField(
            model_name='followupinitial',
            name='last_dialysis_at',
            field=models.DateField(blank=True, null=True, verbose_name='FB10 date of last dialysis'),
        ),
        migrations.AddField(
            model_name='followupinitial',
            name='on_dialysis_at_death',
            field=models.NullBooleanField(verbose_name='FB30 on dialysis at death'),
        ),
        migrations.RemoveField(
            model_name='followup1y',
            name='urine_creatinine',
        ),
        migrations.RemoveField(
            model_name='followup1y',
            name='urine_creatinine_unit',
        ),
        migrations.RemoveField(
            model_name='followup3m',
            name='urine_creatinine',
        ),
        migrations.RemoveField(
            model_name='followup3m',
            name='urine_creatinine_unit',
        ),
        migrations.RemoveField(
            model_name='followup6m',
            name='urine_creatinine',
        ),
        migrations.RemoveField(
            model_name='followup6m',
            name='urine_creatinine_unit',
        ),
        migrations.RemoveField(
            model_name='followup1y',
            name='graft_failure',
        ),
        migrations.RemoveField(
            model_name='followup1y',
            name='graft_removal',
        ),
        migrations.RemoveField(
            model_name='followup3m',
            name='graft_failure',
        ),
        migrations.RemoveField(
            model_name='followup3m',
            name='graft_removal',
        ),
        migrations.RemoveField(
            model_name='followup6m',
            name='graft_failure',
        ),
        migrations.RemoveField(
            model_name='followup6m',
            name='graft_removal',
        ),
        migrations.RemoveField(
            model_name='followupinitial',
            name='graft_failure',
        ),
        migrations.RemoveField(
            model_name='followupinitial',
            name='graft_removal',
        ),
        migrations.AddField(
            model_name='followupinitial',
            name='dialysis_requirement_1',
            field=models.NullBooleanField(verbose_name='FI09 dialysis on day 1'),
        ),
        migrations.AlterField(
            model_name='followupinitial',
            name='dialysis_requirement_2',
            field=models.NullBooleanField(verbose_name='FI10 dialysis on day 2'),
        ),
        migrations.AlterField(
            model_name='followupinitial',
            name='dialysis_requirement_3',
            field=models.NullBooleanField(verbose_name='FI11 dialysis on day 3'),
        ),
        migrations.AlterField(
            model_name='followupinitial',
            name='dialysis_requirement_4',
            field=models.NullBooleanField(verbose_name='FI12 dialysis on day 4'),
        ),
        migrations.AlterField(
            model_name='followupinitial',
            name='dialysis_requirement_5',
            field=models.NullBooleanField(verbose_name='FI13 dialysis on day 5'),
        ),
        migrations.AlterField(
            model_name='followupinitial',
            name='dialysis_requirement_6',
            field=models.NullBooleanField(verbose_name='FI14 dialysis on day 6'),
        ),
        migrations.AlterField(
            model_name='followupinitial',
            name='dialysis_requirement_7',
            field=models.NullBooleanField(verbose_name='FI15 dialysis on day 7'),
        ),
        migrations.AlterField(
            model_name='followupinitial',
            name='induction_therapy',
            field=models.PositiveSmallIntegerField(blank=True, choices=[(1, 'FIc10 IL 2'), (2, 'FIc11 ATG'), (3, 'FIc12 None')], null=True, verbose_name='FI25 Induction therapy'),
        ),
        migrations.RemoveField(
            model_name='followup1y',
            name='qol_anxiety',
        ),
        migrations.RemoveField(
            model_name='followup1y',
            name='qol_mobility',
        ),
        migrations.RemoveField(
            model_name='followup1y',
            name='qol_pain',
        ),
        migrations.RemoveField(
            model_name='followup1y',
            name='qol_selfcare',
        ),
        migrations.RemoveField(
            model_name='followup1y',
            name='qol_usual_activities',
        ),
        migrations.RemoveField(
            model_name='followup1y',
            name='vas_score',
        ),
        migrations.RemoveField(
            model_name='followup3m',
            name='qol_anxiety',
        ),
        migrations.RemoveField(
            model_name='followup3m',
            name='qol_mobility',
        ),
        migrations.RemoveField(
            model_name='followup3m',
            name='qol_pain',
        ),
        migrations.RemoveField(
            model_name='followup3m',
            name='qol_selfcare',
        ),
        migrations.RemoveField(
            model_name='followup3m',
            name='qol_usual_activities',
        ),
        migrations.RemoveField(
            model_name='followup3m',
            name='vas_score',
        ),
        migrations.RemoveField(
            model_name='followup1y',
            name='created_by',
        ),
        migrations.AlterField(
            model_name='followup1y',
            name='record_locked',
            field=models.BooleanField(default=False, help_text='Not presently implemented or used'),
        ),
        migrations.AlterField(
            model_name='followup1y',
            name='version',
            field=models.PositiveIntegerField(default=0, help_text='Internal tracking version number'),
        ),
        migrations.RemoveField(
            model_name='followup3m',
            name='created_by',
        ),
        migrations.AlterField(
            model_name='followup3m',
            name='record_locked',
            field=models.BooleanField(default=False, help_text='Not presently implemented or used'),
        ),
        migrations.AlterField(
            model_name='followup3m',
            name='version',
            field=models.PositiveIntegerField(default=0, help_text='Internal tracking version number'),
        ),
        migrations.RemoveField(
            model_name='followup6m',
            name='created_by',
        ),
        migrations.AlterField(
            model_name='followup6m',
            name='record_locked',
            field=models.BooleanField(default=False, help_text='Not presently implemented or used'),
        ),
        migrations.AlterField(
            model_name='followup6m',
            name='version',
            field=models.PositiveIntegerField(default=0, help_text='Internal tracking version number'),
        ),
        migrations.RemoveField(
            model_name='followupinitial',
            name='created_by',
        ),
        migrations.AlterField(
            model_name='followupinitial',
            name='record_locked',
            field=models.BooleanField(default=False, help_text='Not presently implemented or used'),
        ),
        migrations.AlterField(
            model_name='followupinitial',
            name='version',
            field=models.PositiveIntegerField(default=0, help_text='Internal tracking version number'),
        ),
        migrations.RemoveField(
            model_name='followup1y',
            name='organ',
        ),
        migrations.RemoveField(
            model_name='followup3m',
            name='organ',
        ),
        migrations.RemoveField(
            model_name='followup6m',
            name='organ',
        ),
        migrations.RemoveField(
            model_name='followupinitial',
            name='organ',
        ),
        migrations.DeleteModel(
            name='FollowUp1Y',
        ),
        migrations.DeleteModel(
            name='FollowUp3M',
        ),
        migrations.DeleteModel(
            name='FollowUp6M',
        ),
        migrations.DeleteModel(
            name='FollowUpInitial',
        ),
    ]
