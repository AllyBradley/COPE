# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import migrations, models
import wp4.compare.models
import django.utils.timezone
from django.conf import settings
import django.core.validators


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('perfusion_machine', '0001_initial'),
        ('locations', '0001_initial'),
        ('staff_person', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Donor',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('version', models.PositiveIntegerField(default=0)),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('record_locked', models.BooleanField(default=False)),
                ('sequence_number', models.PositiveSmallIntegerField(default=0)),
                ('multiple_recipients', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='DO02 Multiple recipients', choices=[(2, 'MMc03 Unknown'), (0, 'MMc01 No'), (1, 'MMc02 Yes')])),
                ('form_completed', models.BooleanField(default=False)),
                ('call_received', models.DateTimeField(null=True, verbose_name='DO05 Consultant to MTO called at', blank=True)),
                ('call_received_unknown', models.BooleanField(default=False)),
                ('scheduled_start', models.DateTimeField(null=True, verbose_name='DO07 time of withdrawal therapy', blank=True)),
                ('scheduled_start_unknown', models.BooleanField(default=False)),
                ('technician_arrival', models.DateTimeField(null=True, verbose_name='DO08 arrival time of technician', blank=True)),
                ('technician_arrival_unknown', models.BooleanField(default=False)),
                ('ice_boxes_filled', models.DateTimeField(null=True, verbose_name='DO09 ice boxes filled', blank=True)),
                ('ice_boxes_filled_unknown', models.BooleanField(default=False)),
                ('depart_perfusion_centre', models.DateTimeField(null=True, verbose_name='DO10 departure from base hospital at', blank=True)),
                ('depart_perfusion_centre_unknown', models.BooleanField(default=False)),
                ('arrival_at_donor_hospital', models.DateTimeField(null=True, verbose_name='DO11 arrival at donor hospital', blank=True)),
                ('arrival_at_donor_hospital_unknown', models.BooleanField(default=False)),
                ('age', models.PositiveSmallIntegerField(verbose_name='DO12 age', validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(99)])),
                ('date_of_admission', models.DateField(null=True, verbose_name='DO13 date of admission', blank=True)),
                ('date_of_admission_unknown', models.BooleanField(default=False)),
                ('admitted_to_itu', models.BooleanField(default=False, verbose_name='DO14 admitted to ITU')),
                ('date_admitted_to_itu', models.DateField(null=True, verbose_name='DO15 when admitted to ITU', blank=True)),
                ('date_admitted_to_itu_unknown', models.BooleanField(default=False)),
                ('date_of_procurement', models.DateField(null=True, verbose_name='DO16 date of procurement', blank=True)),
                ('other_organs_procured', models.BooleanField(default=False, verbose_name='DO17 other organs procured')),
                ('other_organs_lungs', models.BooleanField(default=False, verbose_name='DO18 lungs')),
                ('other_organs_pancreas', models.BooleanField(default=False, verbose_name='DO19 pancreas')),
                ('other_organs_liver', models.BooleanField(default=False, verbose_name='DO20 liver')),
                ('other_organs_tissue', models.BooleanField(default=False, verbose_name='DO21 tissue')),
                ('diagnosis', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='DO22 diagnosis', choices=[(1, 'DOc01 Cerebrovascular Accident'), (2, 'DOc02 Hypoxia'), (3, 'DOc03 Trauma'), (4, 'DOc04 Other')])),
                ('diagnosis_other', models.CharField(max_length=250, verbose_name='DO23 other diagnosis', blank=True)),
                ('diabetes_melitus', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='DO24 diabetes mellitus', choices=[(2, 'MMc03 Unknown'), (0, 'MMc01 No'), (1, 'MMc02 Yes')])),
                ('alcohol_abuse', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='DO25 alcohol abuse', choices=[(2, 'MMc03 Unknown'), (0, 'MMc01 No'), (1, 'MMc02 Yes')])),
                ('cardiac_arrest', models.NullBooleanField(verbose_name='DO26 cardiac arrest')),
                ('systolic_blood_pressure', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='DO27 last systolic blood pressure', validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(200)])),
                ('diastolic_blood_pressure', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='DO28 last diastolic blood pressure', validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(200)])),
                ('diuresis_last_day', models.PositiveSmallIntegerField(null=True, verbose_name='DO29 diuresis last day (ml)', blank=True)),
                ('diuresis_last_day_unknown', models.BooleanField(default=False)),
                ('diuresis_last_hour', models.PositiveSmallIntegerField(null=True, verbose_name='DO30 diuresis last hour (ml)', blank=True)),
                ('diuresis_last_hour_unknown', models.BooleanField(default=False)),
                ('dopamine', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='DO31 dopamine', choices=[(2, 'MMc03 Unknown'), (0, 'MMc01 No'), (1, 'MMc02 Yes')])),
                ('dobutamine', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='DO32 dobutamine', choices=[(2, 'MMc03 Unknown'), (0, 'MMc01 No'), (1, 'MMc02 Yes')])),
                ('nor_adrenaline', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='DO33 nor adrenaline', choices=[(2, 'MMc03 Unknown'), (0, 'MMc01 No'), (1, 'MMc02 Yes')])),
                ('vasopressine', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='DO34 vasopressine', choices=[(2, 'MMc03 Unknown'), (0, 'MMc01 No'), (1, 'MMc02 Yes')])),
                ('other_medication_details', models.CharField(max_length=250, verbose_name='DO35 other medication', blank=True)),
                ('last_creatinine', models.FloatField(blank=True, null=True, verbose_name='DO36 last creatinine', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('last_creatinine_unit', models.PositiveSmallIntegerField(default=1, choices=[(1, 'mg/dl'), (2, 'umol/L')])),
                ('max_creatinine', models.FloatField(null=True, verbose_name='DO37 max creatinine', blank=True)),
                ('max_creatinine_unit', models.PositiveSmallIntegerField(default=1, choices=[(1, 'mg/dl'), (2, 'umol/L')])),
                ('life_support_withdrawal', models.DateTimeField(null=True, verbose_name='DO38 withdrawal of life support', blank=True)),
                ('systolic_pressure_low', models.DateTimeField(null=True, verbose_name='DO39 systolic arterial pressure', blank=True)),
                ('systolic_pressure_low_unknown', models.BooleanField(default=False)),
                ('o2_saturation', models.DateTimeField(null=True, verbose_name='DO40 O2 saturation below 80%', blank=True)),
                ('o2_saturation_unknown', models.BooleanField(default=False)),
                ('circulatory_arrest', models.DateTimeField(null=True, verbose_name='DO41 end of cardiac output', blank=True)),
                ('circulatory_arrest_unknown', models.BooleanField(default=False)),
                ('length_of_no_touch', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='DO42 length of no touch period (minutes)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(60)])),
                ('death_diagnosed', models.DateTimeField(null=True, verbose_name='DO43 knife to skin time', blank=True)),
                ('perfusion_started', models.DateTimeField(null=True, verbose_name='DO44 start in-situ cold perfusion', blank=True)),
                ('perfusion_started_unknown', models.BooleanField(default=False)),
                ('systemic_flush_used', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='DO45 systemic (aortic) flush solution used', choices=[(3, 'HTK'), (2, "Marshall's"), (1, 'UW'), (4, 'DOc04 Other')])),
                ('systemic_flush_used_other', models.CharField(max_length=250, verbose_name='DO46 systemic flush used', blank=True)),
                ('systemic_flush_volume_used', models.PositiveSmallIntegerField(null=True, verbose_name='DO47 aortic - volume (ml)', blank=True)),
                ('heparin', models.NullBooleanField(verbose_name='DO48 heparin')),
                ('created_by', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
                ('perfusion_technician', models.ForeignKey(related_name='donor_perfusion_technician_set', verbose_name='DO03 name of transplant technician', to='staff_person.StaffPerson')),
            ],
            options={
                'ordering': ['sequence_number'],
                'verbose_name': 'DOm1 donor',
                'verbose_name_plural': 'DOm2 donors',
            },
        ),
        migrations.CreateModel(
            name='Organ',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('version', models.PositiveIntegerField(default=0)),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('record_locked', models.BooleanField(default=False)),
                ('location', models.CharField(max_length=1, verbose_name='OR01 kidney location', choices=[('L', 'ORc01 Left'), ('R', 'ORc02 Right')])),
                ('removal', models.DateTimeField(null=True, verbose_name='OR02 time out', blank=True)),
                ('renal_arteries', models.PositiveSmallIntegerField(null=True, verbose_name='OR03 number of renal arteries', blank=True)),
                ('graft_damage', models.PositiveSmallIntegerField(default=5, verbose_name='OR04 renal graft damage', choices=[(5, 'ORc01 None'), (1, 'ORc02 Arterial Damage'), (2, 'ORc03 Venous Damage'), (3, 'ORc04 Ureteral Damage'), (4, 'ORc05 Parenchymal Damage'), (6, 'ORc06 Other Damage')])),
                ('graft_damage_other', models.CharField(max_length=250, verbose_name='OR05 other damage done', blank=True)),
                ('washout_perfusion', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='OR06 perfusion characteristics', choices=[(1, 'ORc07 Homogenous'), (2, 'ORc08 Patchy'), (3, 'ORc09 Blue'), (9, 'ORc10 Unknown')])),
                ('transplantable', models.NullBooleanField(verbose_name='OR07 is transplantable')),
                ('not_transplantable_reason', models.CharField(max_length=250, verbose_name='OR08 not transplantable because', blank=True)),
                ('preservation', models.PositiveSmallIntegerField(default=9, choices=[(9, 'ORc11 Not Set'), (0, 'HMP'), (1, 'HMP O2')])),
                ('perfusion_possible', models.NullBooleanField(verbose_name='OR09 machine perfusion possible?')),
                ('perfusion_not_possible_because', models.CharField(max_length=250, verbose_name='OR10 not possible because', blank=True)),
                ('perfusion_started', models.DateTimeField(null=True, verbose_name='OR11 machine perfusion', blank=True)),
                ('patch_holder', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='OR12 used patch holder', choices=[(1, 'ORc12 Small'), (2, 'ORc13 Large'), (3, 'ORc14 Double Artery')])),
                ('artificial_patch_used', models.NullBooleanField(verbose_name='OR13 artificial patch used')),
                ('artificial_patch_size', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='OR14 artificial patch size', choices=[(1, 'ORc12 Small'), (2, 'ORc13 Large')])),
                ('artificial_patch_number', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='OR15 number of patches', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(2)])),
                ('oxygen_bottle_full', models.NullBooleanField(verbose_name='OR16 is oxygen bottle full')),
                ('oxygen_bottle_open', models.NullBooleanField(verbose_name='OR17 oxygen bottle opened')),
                ('oxygen_bottle_changed', models.NullBooleanField(verbose_name='OR18 oxygen bottle changed')),
                ('oxygen_bottle_changed_at', models.DateTimeField(null=True, verbose_name='OR19 oxygen bottle changed at', blank=True)),
                ('oxygen_bottle_changed_at_unknown', models.BooleanField(default=False)),
                ('ice_container_replenished', models.NullBooleanField(verbose_name='OR20 ice container replenished')),
                ('ice_container_replenished_at', models.DateTimeField(null=True, verbose_name='OR21 ice container replenished at', blank=True)),
                ('ice_container_replenished_at_unknown', models.BooleanField(default=False)),
                ('perfusate_measurable', models.NullBooleanField(verbose_name='OR22 perfusate measurable')),
                ('perfusate_measure', models.FloatField(null=True, verbose_name='OR23 value pO2', blank=True)),
                ('created_by', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
                ('donor', models.ForeignKey(to='compare.Donor')),
                ('perfusion_file', models.ForeignKey(verbose_name='OR25 machine file', blank=True, to='perfusion_machine.PerfusionFile', null=True)),
                ('perfusion_machine', models.ForeignKey(verbose_name='OR24 perfusion machine', blank=True, to='perfusion_machine.PerfusionMachine', null=True)),
            ],
            options={
                'verbose_name': 'ORm1 organ',
                'verbose_name_plural': 'ORm2 organs',
            },
        ),
        migrations.CreateModel(
            name='OrganAllocation',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('version', models.PositiveIntegerField(default=0)),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('record_locked', models.BooleanField(default=False)),
                ('call_received', models.DateTimeField(null=True, verbose_name='OA02 call received from transplant co-ordinator at', blank=True)),
                ('call_received_unknown', models.BooleanField(default=False)),
                ('scheduled_start', models.DateTimeField(null=True, verbose_name='OA05 scheduled start', blank=True)),
                ('scheduled_start_unknown', models.BooleanField(default=False)),
                ('technician_arrival', models.DateTimeField(null=True, verbose_name='OA06 arrival time at hub', blank=True)),
                ('technician_arrival_unknown', models.BooleanField(default=False)),
                ('depart_perfusion_centre', models.DateTimeField(null=True, verbose_name='OA07 departure from hub', blank=True)),
                ('depart_perfusion_centre_unknown', models.BooleanField(default=False)),
                ('arrival_at_recipient_hospital', models.DateTimeField(null=True, verbose_name='OA08 arrival at transplant hospital', blank=True)),
                ('arrival_at_recipient_hospital_unknown', models.BooleanField(default=False)),
                ('journey_remarks', models.TextField(verbose_name='OA09 journey notes', blank=True)),
                ('reallocated', models.NullBooleanField(default=None, verbose_name='OA10 reallocated')),
                ('reallocation_reason', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='OA11 reason for re-allocation', choices=[(1, 'OAc01 Positive crossmatch'), (2, 'OAc02 Unknown'), (3, 'OAc03 Other')])),
                ('reallocation_reason_other', models.CharField(max_length=250, verbose_name='OA12 other reason', blank=True)),
                ('created_by', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
                ('organ', models.ForeignKey(to='compare.Organ')),
                ('perfusion_technician', models.ForeignKey(related_name='recipient_perfusion_technician_set', verbose_name='OA01 name of transplant technician', blank=True, to='staff_person.StaffPerson', null=True)),
                ('reallocation', models.OneToOneField(null=True, default=None, blank=True, to='compare.OrganAllocation')),
                ('theatre_contact', models.ForeignKey(related_name='recipient_transplant_coordinator_set', verbose_name='OA04 name of the theatre contact', blank=True, to='staff_person.StaffPerson', null=True)),
                ('transplant_hospital', models.ForeignKey(verbose_name='OA03 transplant hospital', to='locations.Hospital')),
            ],
            options={
                'get_latest_by': 'created_on',
                'verbose_name': 'OAm1 organ allocation',
                'verbose_name_plural': 'OAm2 organ allocations',
            },
        ),
        migrations.CreateModel(
            name='OrganPerson',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('version', models.PositiveIntegerField(default=0)),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('record_locked', models.BooleanField(default=False)),
                ('number', models.CharField(max_length=20, verbose_name='OP01 NHSBT Number', blank=True)),
                ('date_of_birth', models.DateField(null=True, verbose_name='OP02 date of birth', blank=True)),
                ('date_of_birth_unknown', models.BooleanField(default=False)),
                ('gender', models.CharField(default='M', max_length=1, verbose_name='OP03 gender', choices=[('M', 'OPc01 Male'), ('F', 'OPc02 Female')])),
                ('weight', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='OP04 Weight (kg)', validators=[django.core.validators.MinValueValidator(20), django.core.validators.MaxValueValidator(200)])),
                ('height', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='OP05 Height (cm)', validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(250)])),
                ('ethnicity', models.IntegerField(blank=True, null=True, verbose_name='OP06 ethnicity', choices=[(1, 'OPc03 Caucasian'), (2, 'OPc04 Black'), (3, 'OPc05 Other')])),
                ('blood_group', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='OP07 blood group', choices=[(1, 'O'), (2, 'A'), (3, 'B'), (4, 'AB'), (5, 'OPc06 Unknown')])),
                ('created_by', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['number'],
                'verbose_name': 'OPm1 trial person',
                'verbose_name_plural': 'OPm2 organ people',
            },
        ),
        migrations.CreateModel(
            name='ProcurementResource',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('type', models.CharField(max_length=5, verbose_name='PR02 resource used', choices=[('D', 'PRc01 Disposables'), ('C-SM', 'PRc02 Extra cannula small (3mm)'), ('C-LG', 'PRc03 Extra cannula large (5mm)'), ('PH-SM', 'PRc04 Extra patch holder small'), ('PH-LG', 'PRc05 Extra patch holder large'), ('DB-C', 'PRc06 Extra double cannula set'), ('P', 'PRc07 Perfusate solution')])),
                ('lot_number', models.CharField(max_length=50, verbose_name='PR03 lot number', blank=True)),
                ('expiry_date', models.DateField(null=True, verbose_name='PR04 expiry date', blank=True)),
                ('expiry_date_unknown', models.BooleanField(default=False)),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_by', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
                ('organ', models.ForeignKey(verbose_name='PR01 related kidney', to='compare.Organ')),
            ],
            options={
                'verbose_name': 'PRm1 procurement resource',
                'verbose_name_plural': 'PRm2 procurement resources',
            },
        ),
        migrations.CreateModel(
            name='Randomisation',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('country', models.PositiveSmallIntegerField(verbose_name='RA01 country', choices=[(1, 'MM10 United Kingdom'), (4, 'MM11 Belgium'), (5, 'MM12 Netherlands')])),
                ('result', models.BooleanField(default=wp4.compare.models.random_5050, verbose_name='RA02 result')),
                ('allocated_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('donor', models.OneToOneField(null=True, default=None, blank=True, to='compare.Donor')),
            ],
        ),
        migrations.CreateModel(
            name='Recipient',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('version', models.PositiveIntegerField(default=0)),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('record_locked', models.BooleanField(default=False)),
                ('form_completed', models.BooleanField(default=False)),
                ('signed_consent', models.NullBooleanField(default=None, verbose_name='RE13 informed consent given')),
                ('single_kidney_transplant', models.NullBooleanField(default=None, verbose_name='RE14 receiving one kidney')),
                ('renal_disease', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='RE15 renal disease', choices=[(1, 'REc04 Glomerular diseases'), (2, 'REc05 Polycystic kidneys'), (3, 'REc06 Uncertain etiology'), (4, 'REc07 Tubular and interstitial diseases'), (5, 'REc08 Retransplant graft failure'), (6, 'REc09 diabetic nephropathyes'), (7, 'REc10 hypertensive nephropathyes'), (8, 'REc11 congenital rare disorders'), (9, 'REc12 renovascular and other diseases'), (10, 'REc13 neoplasms'), (11, 'REc14 other')])),
                ('renal_disease_other', models.CharField(max_length=250, verbose_name='RE16 other renal disease', blank=True)),
                ('pre_transplant_diuresis', models.PositiveSmallIntegerField(null=True, verbose_name='RE17 diuresis (ml/24hr)', blank=True)),
                ('knife_to_skin', models.DateTimeField(null=True, verbose_name='RE18 knife to skin time', blank=True)),
                ('perfusate_measure', models.FloatField(null=True, verbose_name='RE19 pO2 perfusate', blank=True)),
                ('perfusion_stopped', models.DateTimeField(null=True, verbose_name='RE20 stop machine perfusion', blank=True)),
                ('organ_cold_stored', models.BooleanField(default=False, verbose_name='RE21 kidney was cold stored?')),
                ('tape_broken', models.NullBooleanField(verbose_name='RE22 tape over regulator broken')),
                ('removed_from_machine_at', models.DateTimeField(null=True, verbose_name='RE23 kidney removed from machine at', blank=True)),
                ('oxygen_full_and_open', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='RE24 oxygen full and open', choices=[(2, 'MMc03 Unknown'), (0, 'MMc01 No'), (1, 'MMc02 Yes')])),
                ('organ_untransplantable', models.NullBooleanField(verbose_name='RE25 kidney discarded')),
                ('organ_untransplantable_reason', models.CharField(max_length=250, verbose_name='RE26 untransplantable because', blank=True)),
                ('anesthesia_started_at', models.DateTimeField(null=True, verbose_name='RE27 start anesthesia at', blank=True)),
                ('incision', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='RE28 incision', choices=[(1, 'REc15 midline laparotomy'), (2, 'REc16 hockey stick'), (3, 'REc17 unknown')])),
                ('transplant_side', models.CharField(blank=True, max_length=1, verbose_name='RE29 transplant side', choices=[('L', 'ORc01 Left'), ('R', 'ORc02 Right')])),
                ('arterial_problems', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='RE30 arterial problems', choices=[(1, 'REc18 None'), (2, 'REc19 ligated polar artery'), (3, 'REc20 reconstructed polar artery'), (4, 'REc21 repaired intima dissection'), (5, 'REc22 other')])),
                ('arterial_problems_other', models.CharField(max_length=250, verbose_name='RE31 arterial problems other', blank=True)),
                ('venous_problems', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='RE32 venous problems', choices=[(1, 'REc23 none'), (2, 'REc24 laceration'), (3, 'REc25 elongation plasty'), (4, 'REc26 other')])),
                ('venous_problems_other', models.CharField(max_length=250, verbose_name='RE33 venous problems other', blank=True)),
                ('anastomosis_started_at', models.DateTimeField(null=True, verbose_name='RE34 start anastomosis at', blank=True)),
                ('anastomosis_started_at_unknown', models.BooleanField(default=False)),
                ('reperfusion_started_at', models.DateTimeField(null=True, verbose_name='RE35 start reperfusion at', blank=True)),
                ('reperfusion_started_at_unknown', models.BooleanField(default=False)),
                ('mannitol_used', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='RE36 mannitol used', choices=[(2, 'MMc03 Unknown'), (0, 'MMc01 No'), (1, 'MMc02 Yes')])),
                ('other_diurectics', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='RE37 other diurectics used', choices=[(2, 'MMc03 Unknown'), (0, 'MMc01 No'), (1, 'MMc02 Yes')])),
                ('other_diurectics_details', models.CharField(max_length=250, verbose_name='RE38 other diurectics detail', blank=True)),
                ('systolic_blood_pressure', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='RE39 systolic blood pressure at reperfusion', validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(200)])),
                ('cvp', models.PositiveSmallIntegerField(null=True, verbose_name='RE40 cvp at reperfusion', blank=True)),
                ('intra_operative_diuresis', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='RE41 intra-operative diuresis', choices=[(2, 'MMc03 Unknown'), (0, 'MMc01 No'), (1, 'MMc02 Yes')])),
                ('successful_conclusion', models.BooleanField(default=False, verbose_name='RE42 successful conclusion')),
                ('operation_concluded_at', models.DateTimeField(null=True, verbose_name='RE43 operation concluded at', blank=True)),
                ('probe_cleaned', models.NullBooleanField(verbose_name='RE44 temperature and flow probe cleaned')),
                ('ice_removed', models.NullBooleanField(verbose_name='RE45 ice and water removed')),
                ('oxygen_flow_stopped', models.NullBooleanField(verbose_name='RE46 oxygen flow stopped')),
                ('oxygen_bottle_removed', models.NullBooleanField(verbose_name='RE47 oxygen bottle removed')),
                ('box_cleaned', models.NullBooleanField(verbose_name='RE48 box kidney assist cleaned')),
                ('batteries_charged', models.NullBooleanField(verbose_name='RE49 batteries charged')),
                ('cleaning_log', models.TextField(verbose_name='RE50 cleaning log notes', blank=True)),
                ('allocation', models.OneToOneField(to='compare.OrganAllocation')),
                ('created_by', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
                ('organ', models.OneToOneField(to='compare.Organ')),
                ('person', models.OneToOneField(to='compare.OrganPerson')),
            ],
            options={
                'get_latest_by': 'created_on',
                'verbose_name': 'REm1 recipient',
                'verbose_name_plural': 'REm2 recipients',
            },
        ),
        migrations.CreateModel(
            name='RetrievalTeam',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('centre_code', models.PositiveSmallIntegerField(verbose_name='RT01 centre code', validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(99)])),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('based_at', models.ForeignKey(verbose_name='RT02 base hospital', to='locations.Hospital')),
                ('created_by', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['centre_code'],
                'verbose_name': 'RTm1 retrieval team',
                'verbose_name_plural': 'RTm2 retrieval teams',
            },
        ),
        migrations.AddField(
            model_name='donor',
            name='person',
            field=models.OneToOneField(to='compare.OrganPerson'),
        ),
        migrations.AddField(
            model_name='donor',
            name='retrieval_hospital',
            field=models.ForeignKey(verbose_name='DO06 donor hospital', blank=True, to='locations.Hospital', null=True),
        ),
        migrations.AddField(
            model_name='donor',
            name='retrieval_team',
            field=models.ForeignKey(verbose_name='DO01 retrieval team', to='compare.RetrievalTeam'),
        ),
        migrations.AddField(
            model_name='donor',
            name='transplant_coordinator',
            field=models.ForeignKey(related_name='donor_transplant_coordinator_set', verbose_name='DO04 name of the SN-OD', blank=True, to='staff_person.StaffPerson', null=True),
        ),
        migrations.AlterOrderWithRespectTo(
            name='recipient',
            order_with_respect_to='organ',
        ),
        migrations.AlterOrderWithRespectTo(
            name='organallocation',
            order_with_respect_to='organ',
        ),
        migrations.AlterOrderWithRespectTo(
            name='donor',
            order_with_respect_to='retrieval_team',
        ),
    ]
