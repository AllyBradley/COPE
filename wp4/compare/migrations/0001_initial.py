# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import django.utils.timezone
from django.conf import settings
import django.core.validators


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AdverseEvent',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('version', models.PositiveIntegerField(default=0)),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('record_locked', models.BooleanField(default=False)),
                ('sequence_number', models.PositiveSmallIntegerField(default=0, verbose_name='AE01 sequence number')),
                ('onset_at_date', models.DateField(verbose_name='AE02 onset date')),
                ('resolution_at_date', models.DateField(null=True, verbose_name='AE03 resolution date', blank=True)),
                ('device_related', models.BooleanField(default=False, verbose_name='AE05 device related')),
                ('description', models.CharField(default=b'', max_length=1000, verbose_name='AE06 description')),
                ('action', models.CharField(default=b'', max_length=1000, verbose_name='AE07 action')),
                ('outcome', models.CharField(default=b'', max_length=1000, verbose_name='AE08 outcome')),
            ],
            options={
                'ordering': ['sequence_number'],
                'verbose_name': 'AEm1 adverse event',
                'verbose_name_plural': 'AEm2 adverse events',
            },
        ),
        migrations.CreateModel(
            name='AlternativeGrading',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('label', models.CharField(max_length=10)),
                ('description', models.CharField(max_length=300)),
            ],
        ),
        migrations.CreateModel(
            name='ClavienDindoGrading',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('label', models.CharField(max_length=10)),
                ('description', models.CharField(max_length=300)),
            ],
        ),
        migrations.CreateModel(
            name='Donor',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('version', models.PositiveIntegerField(default=0)),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('record_locked', models.BooleanField(default=False)),
                ('number', models.CharField(max_length=20, verbose_name='DO30 NHSBT Number', blank=True)),
                ('date_of_birth', models.DateField(null=True, verbose_name='DO32 date of birth', blank=True)),
                ('date_of_birth_unknown', models.BooleanField(default=False)),
                ('gender', models.CharField(default=b'M', max_length=1, verbose_name='DO37 gender', choices=[(b'M', 'DO20 Male'), (b'F', 'DO21 Female')])),
                ('weight', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='DO39 Weight (kg)', validators=[django.core.validators.MinValueValidator(20), django.core.validators.MaxValueValidator(200)])),
                ('height', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='DO40 Height (cm)', validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(250)])),
                ('ethnicity', models.IntegerField(blank=True, null=True, verbose_name='DO41 ethnicity', choices=[(1, 'DO22 Caucasian'), (2, 'DO23 Black'), (3, 'DO24 Other')])),
                ('blood_group', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='DO42 blood group', choices=[(1, b'O'), (2, b'A'), (3, b'B'), (4, b'AB'), (5, 'DO29 Unknown')])),
                ('sequence_number', models.PositiveSmallIntegerField(default=0, verbose_name='DO02 sequence number')),
                ('multiple_recipients', models.NullBooleanField(default=None, verbose_name='DO01 Multiple recipients')),
                ('call_received', models.DateTimeField(null=True, verbose_name='DO05 Consultant to MTO called at', blank=True)),
                ('scheduled_start', models.DateTimeField(null=True, verbose_name='DO07 time of withdrawal therapy', blank=True)),
                ('technician_arrival', models.DateTimeField(null=True, verbose_name='DO08 arrival time of technician at hub', blank=True)),
                ('ice_boxes_filled', models.DateTimeField(null=True, verbose_name='DO09 ice boxes filled', blank=True)),
                ('depart_perfusion_centre', models.DateTimeField(null=True, verbose_name='DO10 departure from base hospital at', blank=True)),
                ('arrival_at_donor_hospital', models.DateTimeField(null=True, verbose_name='DO11 arrival at donor hospital', blank=True)),
                ('age', models.PositiveSmallIntegerField(verbose_name='DO31 age', validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(99)])),
                ('date_of_admission', models.DateField(null=True, verbose_name='DO33 date of admission into hospital', blank=True)),
                ('admitted_to_itu', models.BooleanField(default=False, verbose_name='DO34 admitted to ITU')),
                ('date_admitted_to_itu', models.DateField(null=True, verbose_name='DO35 when admitted to ITU', blank=True)),
                ('date_of_procurement', models.DateField(null=True, verbose_name='DO36 date of procurement', blank=True)),
                ('other_organs_procured', models.BooleanField(default=False, verbose_name='DO43 other organs procured')),
                ('other_organs_lungs', models.BooleanField(default=False, verbose_name='DO44 lungs')),
                ('other_organs_pancreas', models.BooleanField(default=False, verbose_name='DO45 pancreas')),
                ('other_organs_liver', models.BooleanField(default=False, verbose_name='DO46 liver')),
                ('other_organs_tissue', models.BooleanField(default=False, verbose_name='DO47 tissue')),
                ('diagnosis', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='DO54 diagnosis', choices=[(1, 'DO50 Cerebrovascular Accident'), (2, 'DO51 Hypoxia'), (3, 'DO52 Trauma'), (4, 'DO53 Other')])),
                ('diagnosis_other', models.CharField(max_length=250, verbose_name='DO55 other diagnosis', blank=True)),
                ('diabetes_melitus', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='DO56 diabetes mellitus', choices=[(2, 'MM03 Unknown'), (0, 'MM01 No'), (1, 'MM02 Yes')])),
                ('alcohol_abuse', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='DO57 alcohol abuse', choices=[(2, 'MM03 Unknown'), (0, 'MM01 No'), (1, 'MM02 Yes')])),
                ('cardiac_arrest', models.NullBooleanField(verbose_name='DO58 cardiac arrest')),
                ('systolic_blood_pressure', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='DO59 last systolic blood pressure', validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(200)])),
                ('diastolic_blood_pressure', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='DO60 last diastolic blood pressure', validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(200)])),
                ('diuresis_last_day', models.PositiveSmallIntegerField(null=True, verbose_name='DO61 diuresis last day (ml)', blank=True)),
                ('diuresis_last_day_unknown', models.BooleanField(default=False)),
                ('diuresis_last_hour', models.PositiveSmallIntegerField(null=True, verbose_name='DO62 diuresis last hour (ml)', blank=True)),
                ('diuresis_last_hour_unknown', models.BooleanField(default=False)),
                ('dopamine', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='DO63 dopamine', choices=[(2, 'MM03 Unknown'), (0, 'MM01 No'), (1, 'MM02 Yes')])),
                ('dobutamine', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='DO64 dobutamine', choices=[(2, 'MM03 Unknown'), (0, 'MM01 No'), (1, 'MM02 Yes')])),
                ('nor_adrenaline', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='DO65 nor adrenaline', choices=[(2, 'MM03 Unknown'), (0, 'MM01 No'), (1, 'MM02 Yes')])),
                ('vasopressine', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='DO66 vasopressine', choices=[(2, 'MM03 Unknown'), (0, 'MM01 No'), (1, 'MM02 Yes')])),
                ('other_medication_details', models.CharField(max_length=250, verbose_name='DO67 other medication', blank=True)),
                ('last_creatinine', models.FloatField(blank=True, null=True, verbose_name='DO70 last creatinine', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('last_creatinine_unit', models.PositiveSmallIntegerField(default=1, choices=[(1, b'mg/dl'), (2, b'umol/L')])),
                ('max_creatinine', models.FloatField(null=True, verbose_name='DO72 max creatinine', blank=True)),
                ('max_creatinine_unit', models.PositiveSmallIntegerField(default=1, choices=[(1, b'mg/dl'), (2, b'umol/L')])),
                ('life_support_withdrawal', models.DateTimeField(null=True, verbose_name='DO80 withdrawal of life support', blank=True)),
                ('systolic_pressure_low', models.DateTimeField(null=True, verbose_name='DO81 systolic arterial pressure', blank=True)),
                ('o2_saturation', models.DateTimeField(null=True, verbose_name='DO82 O2 saturation below 80%', blank=True)),
                ('circulatory_arrest', models.DateTimeField(null=True, verbose_name='DO83 end of cardiac output', blank=True)),
                ('length_of_no_touch', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='DO84 length of no touch period (minutes)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(60)])),
                ('death_diagnosed', models.DateTimeField(null=True, verbose_name='DO85 knife to skin time', blank=True)),
                ('perfusion_started', models.DateTimeField(null=True, verbose_name='DO86 start in-situ cold perfusion', blank=True)),
                ('systemic_flush_used', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='DO87 systemic (aortic) flush solution used', choices=[(3, b'HTK'), (2, b"Marshall's"), (1, b'UW'), (4, b'Other')])),
                ('systemic_flush_used_other', models.CharField(max_length=250, verbose_name='DO88 systemic flush used', blank=True)),
                ('systemic_flush_volume_used', models.PositiveSmallIntegerField(null=True, verbose_name='DO89 aortic - volume (ml)', blank=True)),
                ('heparin', models.NullBooleanField(verbose_name='DO90 heparin')),
                ('created_by', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['sequence_number'],
                'verbose_name': 'DOm1 donor',
                'verbose_name_plural': 'DOm2 donors',
            },
        ),
        migrations.CreateModel(
            name='Hospital',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=100, verbose_name='HO01 hospital name')),
                ('country', models.PositiveSmallIntegerField(verbose_name='HO03 country', choices=[(1, 'MM10 United Kingdom'), (4, 'MM11 Belgium'), (5, 'MM12 Netherlands')])),
                ('is_active', models.BooleanField(default=True)),
                ('is_project_site', models.BooleanField(default=False)),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_by', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['country', 'name'],
                'verbose_name': 'HOm1 hospital',
                'verbose_name_plural': 'HOm2 hospitals',
            },
        ),
        migrations.CreateModel(
            name='Organ',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('version', models.PositiveIntegerField(default=0)),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('record_locked', models.BooleanField(default=False)),
                ('location', models.CharField(max_length=1, verbose_name='OR03 kidney location', choices=[(b'L', 'OR01 Left'), (b'R', 'OR02 Right')])),
                ('removal', models.DateTimeField(null=True, verbose_name='OR21 time out', blank=True)),
                ('renal_arteries', models.PositiveSmallIntegerField(null=True, verbose_name='OR22 number of renal arteries', blank=True)),
                ('graft_damage', models.PositiveSmallIntegerField(default=5, verbose_name='OR23 renal graft damage', choices=[(5, 'OR15 None'), (1, 'OR10 Arterial Damage'), (2, 'OR11 Venous Damage'), (3, 'OR12 Ureteral Damage'), (4, 'OR13 Parenchymal Damage'), (6, 'OR14 Other Damage')])),
                ('graft_damage_other', models.CharField(max_length=250, verbose_name='OR24 other damage done', blank=True)),
                ('washout_perfusion', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='OR25 perfusion characteristics', choices=[(1, 'OR16 Homogenous'), (2, 'OR17 Patchy'), (3, 'OR18 Blue'), (9, 'OR19 Unknown')])),
                ('transplantable', models.NullBooleanField(verbose_name='OR26 is transplantable')),
                ('not_transplantable_reason', models.CharField(max_length=250, verbose_name='OR27 not transplantable because', blank=True)),
                ('preservation', models.PositiveSmallIntegerField(blank=True, null=True, choices=[(0, b'HMP'), (1, b'HMP O2')])),
                ('perfusion_possible', models.NullBooleanField(verbose_name='OR35 machine perfusion possible?')),
                ('perfusion_not_possible_because', models.CharField(max_length=250, verbose_name='OR36 not possible because', blank=True)),
                ('perfusion_started', models.DateTimeField(null=True, verbose_name='OR37 machine perfusion', blank=True)),
                ('patch_holder', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='OR38 used patch holder', choices=[(1, 'OR30 Small'), (2, 'OR31 Large'), (3, 'OR32 Double Artery')])),
                ('artificial_patch_used', models.NullBooleanField(verbose_name='OR39 artificial patch used')),
                ('artificial_patch_size', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='OR40 artificial patch size', choices=[(1, 'OR33 Small'), (2, 'OR34 Large')])),
                ('artificial_patch_number', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='OR41 number of patches', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(2)])),
                ('oxygen_bottle_full', models.NullBooleanField(verbose_name='OR42 is oxygen bottle full')),
                ('oxygen_bottle_open', models.NullBooleanField(verbose_name='OR43 oxygen bottle opened')),
                ('oxygen_bottle_changed', models.NullBooleanField(verbose_name='OR44 oxygen bottle changed')),
                ('oxygen_bottle_changed_at', models.DateTimeField(null=True, verbose_name='OR45 oxygen bottle changed at', blank=True)),
                ('ice_container_replenished', models.NullBooleanField(verbose_name='OR46 ice container replenished')),
                ('ice_container_replenished_at', models.DateTimeField(null=True, verbose_name='OR47 ice container replenished at', blank=True)),
                ('perfusate_measurable', models.NullBooleanField(verbose_name='OR48 perfusate measurable')),
                ('perfusate_measure', models.FloatField(null=True, verbose_name='OR49 value pO2', blank=True)),
                ('created_by', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
                ('donor', models.ForeignKey(to='compare.Donor')),
            ],
            options={
                'verbose_name': 'ORm1 organ',
                'verbose_name_plural': 'ORm2 organs',
            },
        ),
        migrations.CreateModel(
            name='PerfusionFile',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('file', models.FileField(upload_to=b'', blank=True)),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_by', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'PFm1 perfusion machine file',
                'verbose_name_plural': 'PFm2 perfusion machine files',
            },
        ),
        migrations.CreateModel(
            name='PerfusionMachine',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('machine_serial_number', models.CharField(max_length=50, verbose_name='PM01 machine serial number')),
                ('machine_reference_number', models.CharField(max_length=50, verbose_name='PM02 machine reference number')),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_by', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'PMm1 perfusion machine',
                'verbose_name_plural': 'PMm2 perfusion machines',
            },
        ),
        migrations.CreateModel(
            name='ProcurementResource',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('type', models.CharField(max_length=5, verbose_name='PR11 resource used', choices=[(b'D', 'PR01 Disposables'), (b'C-SM', 'PR02 Extra cannula small (3mm)'), (b'C-LG', 'PR03 Extra cannula large (5mm)'), (b'PH-SM', 'PR04 Extra patch holder small'), (b'PH-LG', 'PR05 Extra patch holder large'), (b'DB-C', 'PR06 Extra double cannula set'), (b'P', 'PR07 Perfusate solution')])),
                ('lot_number', models.CharField(max_length=50, verbose_name='PR12 lot number')),
                ('expiry_date', models.DateField(verbose_name='PR13 expiry date')),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_by', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
                ('organ', models.ForeignKey(verbose_name='PR10 related kidney', to='compare.Organ')),
            ],
            options={
                'verbose_name': 'PRm1 procurement resource',
                'verbose_name_plural': 'PRm2 procurement resources',
            },
        ),
        migrations.CreateModel(
            name='Recipient',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('version', models.PositiveIntegerField(default=0)),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('record_locked', models.BooleanField(default=False)),
                ('number', models.CharField(max_length=20, verbose_name='DO30 NHSBT Number', blank=True)),
                ('date_of_birth', models.DateField(null=True, verbose_name='DO32 date of birth', blank=True)),
                ('date_of_birth_unknown', models.BooleanField(default=False)),
                ('gender', models.CharField(default=b'M', max_length=1, verbose_name='DO37 gender', choices=[(b'M', 'DO20 Male'), (b'F', 'DO21 Female')])),
                ('weight', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='DO39 Weight (kg)', validators=[django.core.validators.MinValueValidator(20), django.core.validators.MaxValueValidator(200)])),
                ('height', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='DO40 Height (cm)', validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(250)])),
                ('ethnicity', models.IntegerField(blank=True, null=True, verbose_name='DO41 ethnicity', choices=[(1, 'DO22 Caucasian'), (2, 'DO23 Black'), (3, 'DO24 Other')])),
                ('blood_group', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='DO42 blood group', choices=[(1, b'O'), (2, b'A'), (3, b'B'), (4, b'AB'), (5, 'DO29 Unknown')])),
                ('call_received', models.DateTimeField(null=True, verbose_name='DO05 Consultant to MTO called at', blank=True)),
                ('scheduled_start', models.DateTimeField(null=True, verbose_name='DO07 time of withdrawal therapy', blank=True)),
                ('technician_arrival', models.DateTimeField(null=True, verbose_name='DO08 arrival time of technician at hub', blank=True)),
                ('depart_perfusion_centre', models.DateTimeField(null=True, verbose_name='DO10 departure from base hospital at', blank=True)),
                ('arrival_at_donor_hospital', models.DateTimeField(null=True, verbose_name='DO11 arrival at donor hospital', blank=True)),
                ('reallocated', models.BooleanField(default=False, verbose_name='reallocated')),
                ('reallocation_reason', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='reason for re-allocation', choices=[(1, 'RE01 Positive crossmatch'), (2, 'RE02 Unknown'), (3, 'RE03 Other')])),
                ('reallocation_reason_other', models.CharField(max_length=250, verbose_name='other reason', blank=True)),
                ('renal_disease', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='DO54 renal disease', choices=[(1, 'Glomerular diseases'), (2, 'Polycystic kidneys'), (3, 'Uncertain etiology'), (4, 'Tubular and interstitial diseases'), (5, 'Retransplant graft failure'), (6, 'diabetic nephropathyes'), (7, 'hypertensive nephropathyes'), (8, 'congenital rare disorders'), (9, 'renovascular and other diseases'), (10, 'neoplasms'), (11, 'other')])),
                ('renal_disease_other', models.CharField(max_length=250, verbose_name='DO55 other renal disease', blank=True)),
                ('pre_transplant_diuresis', models.PositiveSmallIntegerField(null=True, verbose_name='DO61 diuresis (ml/24hr)', blank=True)),
                ('knife_to_skin', models.DateTimeField(null=True, verbose_name='DO85 knife to skin time', blank=True)),
                ('perfusate_measure', models.FloatField(null=True, verbose_name='pO2 perfusate', blank=True)),
                ('perfusion_stopped', models.DateTimeField(null=True, verbose_name='stop machine perfusion', blank=True)),
                ('organ_cold_stored', models.BooleanField(default=False, verbose_name='kidney was cold stored?')),
                ('tape_broken', models.NullBooleanField(verbose_name='tape over regulator broken')),
                ('removed_from_machine_at', models.DateTimeField(null=True, verbose_name='kidney removed from matchine at', blank=True)),
                ('oxygen_full_and_open', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='oxygen full and open', choices=[(2, 'MM03 Unknown'), (0, 'MM01 No'), (1, 'MM02 Yes')])),
                ('organ_untransplantable', models.NullBooleanField(verbose_name='kidney discarded')),
                ('organ_untransplantable_reason', models.CharField(max_length=250, verbose_name='untransplantable because', blank=True)),
                ('anesthesia_started_at', models.DateTimeField(null=True, verbose_name='start anesthesia at', blank=True)),
                ('incision', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='incision', choices=[(1, 'midline laparotomy'), (2, 'hockey stick'), (3, 'unknown')])),
                ('transplant_side', models.CharField(max_length=1, verbose_name='transplant side', choices=[(b'L', 'OR01 Left'), (b'R', 'OR02 Right')])),
                ('arterial_problems', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='arterial problems', choices=[(1, 'None'), (2, 'ligated polar artery'), (3, 'reconstructed polar artery'), (4, 'repaired intima dissection'), (5, 'other')])),
                ('venous_problems', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='venous problems', choices=[(1, 'none'), (2, 'laceration'), (3, 'elongation plasty'), (4, 'other')])),
                ('anastomosis_started_at', models.DateTimeField(null=True, verbose_name='start anastomosis at', blank=True)),
                ('reperfusion_started_at', models.DateTimeField(null=True, verbose_name='start reperfusion at', blank=True)),
                ('mannitol_used', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='mannitol used', choices=[(2, 'MM03 Unknown'), (0, 'MM01 No'), (1, 'MM02 Yes')])),
                ('other_diurectics', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='other diurectics used', choices=[(2, 'MM03 Unknown'), (0, 'MM01 No'), (1, 'MM02 Yes')])),
                ('other_diurectics_details', models.CharField(max_length=250, verbose_name='other diurectics detail', blank=True)),
                ('systolic_blood_pressure', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='systolic blood pressure at reperfusion', validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(200)])),
                ('cvp', models.PositiveSmallIntegerField(null=True, verbose_name='cvp at reperfusion', blank=True)),
                ('intra_operative_diuresis', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='intra-operative diuresis', choices=[(2, 'MM03 Unknown'), (0, 'MM01 No'), (1, 'MM02 Yes')])),
                ('probe_cleaned', models.NullBooleanField(verbose_name='temperature and flow probe cleaned')),
                ('ice_removed', models.NullBooleanField(verbose_name='ice and water removed')),
                ('oxygen_flow_stopped', models.NullBooleanField(verbose_name='oxygen flow stopped')),
                ('oxygen_bottle_removed', models.NullBooleanField(verbose_name='oxygen bottle removed')),
                ('box_cleaned', models.NullBooleanField(verbose_name='box kidney assist cleaned')),
                ('batteries_charged', models.NullBooleanField(verbose_name='batteries charged')),
                ('created_by', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
                ('organ', models.ForeignKey(to='compare.Organ')),
            ],
            options={
                'ordering': ['sequence_number'],
                'get_latest_by': 'created_on',
                'verbose_name': 'REm1 recipient',
                'verbose_name_plural': 'REm2 recipients',
            },
        ),
        migrations.CreateModel(
            name='RetrievalTeam',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('centre_code', models.PositiveSmallIntegerField(verbose_name='HO02 centre code', validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(99)])),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('based_at', models.ForeignKey(verbose_name='RT02 base hospital', to='compare.Hospital')),
                ('created_by', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['centre_code'],
                'verbose_name': 'RTm1 retrieval team',
                'verbose_name_plural': 'RTm2 retrieval teams',
            },
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('type', models.PositiveSmallIntegerField(verbose_name='SA05 sample type', choices=[(1, 'SA10 Donor blood 1'), (2, 'SA11 Donor blood 2'), (3, 'SA12 Donor urine 1'), (4, 'SA13 Donor urine 2'), (5, 'SA14 Kidney perfusate 1'), (6, 'SA15 Kidney perfusate 1'), (7, 'SA16 Kidney perfusate 1'), (8, 'SA17 Recipient blood 1'), (9, 'SA18 Recipient blood 1'), (10, 'SA19 Kidney tissue 1')])),
                ('barcode', models.CharField(max_length=20, verbose_name='SA01 barcode number')),
                ('taken_at', models.DateTimeField(verbose_name='SA02 date and time taken')),
                ('centrifugation', models.DateTimeField(null=True, verbose_name='SA03 centrifugation', blank=True)),
                ('comment', models.CharField(max_length=2000, verbose_name='SA04 comment', blank=True)),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_by', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['taken_at'],
                'verbose_name': 'SAm1 sample',
                'verbose_name_plural': 'SAm2 samples',
            },
        ),
        migrations.CreateModel(
            name='StaffJob',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='StaffPerson',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('version', models.PositiveIntegerField(default=0)),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('record_locked', models.BooleanField(default=False)),
                ('first_names', models.CharField(max_length=50, verbose_name='PE10 first names')),
                ('last_names', models.CharField(max_length=50, verbose_name='PE11 last names')),
                ('telephone', models.CharField(max_length=20, verbose_name='PE13 telephone number', blank=True)),
                ('email', models.EmailField(max_length=254, verbose_name='PE15 email', blank=True)),
                ('based_at', models.ForeignKey(blank=True, to='compare.Hospital', null=True)),
                ('created_by', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
                ('jobs', models.ManyToManyField(to='compare.StaffJob', verbose_name='PE12 jobs')),
                ('user', models.OneToOneField(related_name='profile', null=True, blank=True, to=settings.AUTH_USER_MODEL, verbose_name='PE14 related user account')),
            ],
            options={
                'verbose_name': 'PEm1 person',
                'verbose_name_plural': 'PEm2 people',
            },
        ),
        migrations.AddField(
            model_name='recipient',
            name='perfusion_technician',
            field=models.ForeignKey(related_name='recipient_perfusion_technician_set', verbose_name='DO03 name of transplant technician', blank=True, to='compare.StaffPerson', null=True),
        ),
        migrations.AddField(
            model_name='recipient',
            name='reallocation_recipient',
            field=models.OneToOneField(null=True, default=None, blank=True, to='compare.Recipient'),
        ),
        migrations.AddField(
            model_name='recipient',
            name='transplant_coordinator',
            field=models.ForeignKey(related_name='recipient_transplant_coordinator_set', verbose_name='DO04 name of the SN-OD', blank=True, to='compare.StaffPerson', null=True),
        ),
        migrations.AddField(
            model_name='recipient',
            name='transplant_hospital',
            field=models.ForeignKey(verbose_name='DO06 donor hospital', blank=True, to='compare.Hospital', null=True),
        ),
        migrations.AddField(
            model_name='perfusionfile',
            name='machine',
            field=models.ForeignKey(verbose_name='PF01 perfusion machine', to='compare.PerfusionMachine'),
        ),
        migrations.AddField(
            model_name='organ',
            name='perfusate_1',
            field=models.ForeignKey(related_name='kidney_perfusate_1', verbose_name='OR60 p1', blank=True, to='compare.Sample', null=True),
        ),
        migrations.AddField(
            model_name='organ',
            name='perfusate_2',
            field=models.ForeignKey(related_name='kidney_perfusate_2', verbose_name='OR60 p2', blank=True, to='compare.Sample', null=True),
        ),
        migrations.AddField(
            model_name='organ',
            name='perfusate_3',
            field=models.ForeignKey(related_name='kidney_perfusate_3', verbose_name='OR61 p3', blank=True, to='compare.Sample', null=True),
        ),
        migrations.AddField(
            model_name='organ',
            name='perfusion_file',
            field=models.ForeignKey(verbose_name='OR51 machine file', blank=True, to='compare.PerfusionFile', null=True),
        ),
        migrations.AddField(
            model_name='organ',
            name='perfusion_machine',
            field=models.ForeignKey(verbose_name='OR50 perfusion machine', blank=True, to='compare.PerfusionMachine', null=True),
        ),
        migrations.AddField(
            model_name='donor',
            name='donor_blood_1_EDTA',
            field=models.OneToOneField(related_name='donor_blood_1', null=True, blank=True, to='compare.Sample', verbose_name='DO91 db 1.1 edta'),
        ),
        migrations.AddField(
            model_name='donor',
            name='donor_blood_1_SST',
            field=models.OneToOneField(related_name='donor_blood_2', null=True, blank=True, to='compare.Sample', verbose_name='DO92 db 1.2 sst'),
        ),
        migrations.AddField(
            model_name='donor',
            name='donor_urine_1',
            field=models.OneToOneField(related_name='donor_urine_1', null=True, blank=True, to='compare.Sample', verbose_name='DO93 du 1'),
        ),
        migrations.AddField(
            model_name='donor',
            name='donor_urine_2',
            field=models.OneToOneField(related_name='donor_urine_2', null=True, blank=True, to='compare.Sample', verbose_name='DO94 du 2'),
        ),
        migrations.AddField(
            model_name='donor',
            name='perfusion_technician',
            field=models.ForeignKey(related_name='donor_perfusion_technician_set', verbose_name='DO03 name of transplant technician', to='compare.StaffPerson'),
        ),
        migrations.AddField(
            model_name='donor',
            name='retrieval_hospital',
            field=models.ForeignKey(verbose_name='DO06 donor hospital', blank=True, to='compare.Hospital', null=True),
        ),
        migrations.AddField(
            model_name='donor',
            name='retrieval_team',
            field=models.ForeignKey(verbose_name='DO01 retrieval team', to='compare.RetrievalTeam'),
        ),
        migrations.AddField(
            model_name='donor',
            name='transplant_coordinator',
            field=models.ForeignKey(related_name='donor_transplant_coordinator_set', verbose_name='DO04 name of the SN-OD', blank=True, to='compare.StaffPerson', null=True),
        ),
        migrations.AddField(
            model_name='adverseevent',
            name='contact',
            field=models.ForeignKey(verbose_name='AE09 primary contact', blank=True, to='compare.StaffPerson', null=True),
        ),
        migrations.AddField(
            model_name='adverseevent',
            name='created_by',
            field=models.ForeignKey(to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='adverseevent',
            name='organ',
            field=models.ForeignKey(verbose_name='AE04', to='compare.Organ'),
        ),
        migrations.AlterOrderWithRespectTo(
            name='recipient',
            order_with_respect_to='organ',
        ),
        migrations.AlterOrderWithRespectTo(
            name='donor',
            order_with_respect_to='retrieval_team',
        ),
        migrations.AlterOrderWithRespectTo(
            name='adverseevent',
            order_with_respect_to='organ',
        ),
    ]
